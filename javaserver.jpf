###
+sourcepath=${user.home}/java-webserver-jpf3/java-webserver/src/main/java
+classpath=${user.home}/java-webserver-jpf3/java-webserver/target/server,${user.home}/java-webserver-jpf3/nastaran-jpf-nhandler-3e888cfbb8b6
+native_classpath=${user.home}/java-webserver-jpf3/java-webserver/target/server,${user.home}/java-webserver-jpf3/nastaran-jpf-nhandler-3e888cfbb8b6
+listener=gov.nasa.jpf.listener.MyListener
@using = jpf-nhandler

target=au.id.deejay.webserver.App

nhandler.delegateUnhandledNative=true

nhandler.resetVMState=false

nhandler.spec.delegate=org.apache.log4j.config.PropertySetter.*,java.io.OutputStreamWriter.*

nhandler.spec.skip = java.net.InetAddress.anyLocalAddress,java.net.ServerSocket.accept

#+symbolic.method= <gr.uop.intermittent.faults.intermittentfaultstest.utils.CacheStore.cacheStore(sym#con),gr.uop.intermittent.faults.intermittentfaultstest.utils.Store.CacheStore(sym#con)>
	

#IGNORE.CLINIT=true 
#SHOW.PROGRESS=false 
#SHOW.STATE.GENERATION=false 
#SHOW.DETAILED.STATE.GENERATION=false 
#stop_time=5000

# listener to print information (PCs, test cases) about symbolic run
	
#listener = gov.nasa.jpf.symbc.SymbolicListener

# The following JPF options are usually used for SPF as well:
	
# no state matching

#+vm.storage.class=nil

# instruct jpf not to stop at first error

#+jpf.report.console.finished=
#jpf.print_exception_stack = true
vm.por = true
vm.por.field_boundaries = true
vm.por.field_boundaries.never = java.*,javax.*,sun.*,org.*,java.lang.Thread*.*
vm.por.sync_detection = true
#vm.por.fieldlockinfo.class=
vm.gc = true
vm.shared.sync_detection = true
vm.sync_detection = true
#vm.parallel.allowed.depth=40-350
#vm.parallel.allowed.child=[1]
vm.compilerop = true
#fieldNames=filled
#vm.allowed.threads=main,Thread-1,Thread-2,Thread-3,Thread-4
#vm.allowed.threads.seqdeps=8:9
#vm.varnum = 4

#var_recorder.fields = true
#var_recorder.locals = true
#var_recorder.arrays = true

vm.shared.never_break_fields=\
java.*,\
java.*.*,\
java.*.*.*,\
javax.*,\
sun.*,\
org.*,\
java.io.BufferedReader.*,\
java.lang.Thread*.*,\
java.lang.System.*,\
java.lang.Runtime.*,\
java.lang.Boolean.*,\
java.lang.String.*,\
java.lang.*.TYPE,\
java.util.HashMap.EMPTY_TABLE,\
java.util.HashSet.PRESENT,\
java.util.concurrent.ThreadPoolExecutor*.*,\
java.util.concurrent.ThreadPoolExecutor*.*,\
java.util.concurrent.TimeUnit.*,\
java.util.concurrent.Exchanger.CANCEL,\
java.util.concurrent.Exchanger.NULL_ITEM,\
java.util.concurrent.Executors$DefaultThreadFactory.*,\
java.util.ArrayList.*,\
java.util.AbstractList.*,\
sun.misc.VM.*,\
sun.misc.SharedSecrets.*,\
sun.misc.Unsafe.*

vm.shared.never_break_methods=java.lang.Thread.start,java.lang.Thread.run,java.lang.Thread.*

vm.shared.break_on_exposure = true
vm.shared.skip_finals=true
vm.shared.skip_static_finals=false

#+vm.insn_factory.class=gov.nasa.jpf.symbc.SymbolicInstructionFactory
#+vm.tree_output=true
#+vm.path_output=true
+log.level=info
+jpf.report.console.property_violation=error


cg.threads.break_start=false
cg.threads.break_yield=false
cg.threads.break_sleep=false
cg.threads.break_arrays=false
#cg.break_single_choice = false


# default BooleanChoiceGenerator sequence: do we start with 'false'
cg.boolean.false_first = false

# do we want java.util.Random. nextXX() enumerate choices, or just return a single value?
# (isn't implemented for all types yet)
#cg.enumerate_random=false

# maximum number of processors returned by Runtime.availableProcessors(). If this is
# greater than 1, the call represents a ChoiceGenerator
#cg.max_processors=4

#vm.por.sync_detection.threshold=1

# if this option is true, when thread is started, CG is not created
# but thread is added to the pool of threads for later scheduling
# (when accessing shared variables or when other threads finish)
#cg.threads.break_start=false

# if this option is true, CG is not created when yield() (Thread API)
# is called
#cg.threads.break_yield=true

# if this option is true, CG is not created when sleep() (Thread API)
# is called
#cg.threads.break_sleep=true

# set if we shold also break on array instructions, e.g. to detect races
# for array elements. This is off by default because it can cause serious
# state explosion
#cg.threads.break_arrays=false

#search.class = .search.heuristic.BFSHeuristic
+search.multiple_errors=false
#search.class = .search.heuristic.DFSHeuristic
+search.depth_limit = 120

#+symbolic.min_int=-100

#+symbolic.max_int=100

#+symbolic.min_double=-100.0

#+symbolic.max_double=100.0

#+symbolic.debug=off


